#include <stdio.h>
  struct node *temp = (struct node *)malloc(sizeof(struct node));
  temp->key = item;
  temp->left = temp->right = NULL;
  return temp;
}

// Inorder Traversal using recursion
void inorder(struct node *root) {
  if (root != NULL) {
    // Traverse left
    inorder(root->left);
    // Traverse root
    printf("%d ", root->key);
    // Traverse right
    inorder(root->right);
  }
}

void preorder(struct node *root) {
  if (root != NULL) {
    // Traverse left
     printf("%d ", root->key);
    preorder(root->left);
    // Traverse right
    preorder(root->right);
  }
}
// Find the inorder successor
struct node *minValueNode(struct node *node) {
  struct node *current = node;
  // Find the leftmost leaf
  while (current && current->left != NULL)
    current = current->left;
  return current;
}

// Insert a node in BST
struct node *insert(struct node *node, int key) {
  // write your code here to perform insertion operation
if(node==NULL)
	return newNode(key);
	if(key<node -> key)
		node->left = insert(node -> left, key);
	else if(key>node -> key)
		node -> right = insert(node -> right, key);
	return node;


}

// Deleting a node
struct node *deleteNode(struct node *root, int key) {

  // write your code here to perform deletion operation

if(root == NULL)
	return root;
	if(key<root -> key)
		root -> left = deleteNode (root -> left, key);
	else if(key>root -> key)
		root->right = deleteNode(root -> right,key);
	else{
		if(root->left == NULL){
			struct node *temp = root -> right;
			free(root);
			return temp;
		}
		struct node *temp = root -> left;
		root -> key = temp ->key;
